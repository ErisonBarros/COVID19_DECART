x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
cidades <- c("Recife PE","Olinda PE")
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
map
cidades <- c("Recife PE")
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
getGeoCode("Jaboatão dos Guararapes, Pernambuco, Brazil")
cidades <- c("Recife PE","Olinda PE","Jaboatão dos Guararapes" )
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
getGeoCode("Cabo de Santo Agostinho, Pernambuco, Brazil")
cidades <- c("Recife PE","Olinda PE","Jaboatão dos Guararapes", "Cabo de Santo Agostinho" )
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
map
cidades <- c("Recife PE","Olinda PE","Jaboatão dos Guararapes", "Cabo de Santo Agostinho" )
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
map
map <-
ggmap(
get_map(location = box, maptype="terrain", source="google", color="bw")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
datatable(data,
caption = "Failure Data",
rownames = T,
filter = "top",
options = list(pageLength = 25))
data
rpivotTable(data,
aggregatorName = "Count",
cols= "city",
rows = "date",
rendererName = "Heatmap")
valueBox(max(data$fm),
icon = "fa-user" )
valueBox(round(mean(data$city),
digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$deaths), digits = 2),
icon = "fa-area-chart")
cidades <- c("Recife PE","Olinda PE","Jaboatão dos Guararapes", "Cabo de Santo Agostinho" )
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
map
map <-
ggmap(
get_map(location = box, maptype="terrain", source="google", color="bw")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
cidades <- c("Recife PE","Olinda PE","Jaboatão dos Guararapes", "Cabo de Santo Agostinho" )
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
cidades <- c("Reife PE","Olinda PE")
getGeoCode("Recife, Pernambuco, Brazil")
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
require(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
DF <- data.frame(cidade=cidades, lat=DF$lat, lon=DF$lon)
require(RgoogleMaps)
### Para buscar para mais de um municipio.
require(plyr)
require(ggplot2)
require(ggmap)
box <- make_bbox(lon, lat, data = DF)
map <-
ggmap(
get_map(location = box, maptype="toner", source="stamen")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
map
map <-
ggmap(
get_map(location = box, maptype="terrain", source="google", color="bw")
) +
geom_point(data=DF, x=DF$lon, y=DF$lat, color="red")
valueBox(paste("RECIFE"),
color = "warning")
soma<-sum(data$confirmed)
soma
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 2),
min = 0,
max = 350,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 350,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 10000,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(soma),
digits = 6),
sum(data$confirmed
sum(data$confirmed)
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 10000,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 1000000,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 150),
warning = c(150, 240),
danger = c(240, 350),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(sum(data$confirmed),
digits = 6),
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
view(data$confirmed)
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits = 6),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits =5),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits =2),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits =10),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
## Eliminar as Linhas conm NA's######
data<-na.omit(data)
p4 <- plot_ly(data, x=~confirmed) %>%
add_markers(y = ~deaths,
text = ~paste("confirmed: ", confirmed),
showlegend = F) %>%
add_lines(y = ~fitted(loess(confirmed ~ deaths)),
name = "Loess Smoother",
color = I("#FFC125"),
showlegend = T,
line = list(width=5)) %>%
layout(xaxis = list(title = "casos confirmados"),
yaxis = list(title = "mortes"))
p4
datatable(data,
caption = "Failure Data",
rownames = T,
filter = "top",
options = list(pageLength = 25))
rpivotTable(data,
aggregatorName = "Count",
cols= "city",
rows = "date",
rendererName = "Heatmap")
valueBox(max(data$fm),
icon = "fa-user" )
valueBox(round(mean(data$city),
digits = 2),
icon = "fa-area-chart")
data
valueBox(round(mean(data$city),
digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$deaths), digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$deaths), digits = 2),
icon = "fa-area-chart")
library(flexdashboard)
library(knitr)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(dplyr)
library(openintro)
library(highcharter)
library(ggvis)
library(maps) #mapas simples, eixos, escala, cidades
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
data <- read.csv("covid19-PE_09_04_2020.csv")
data<-data.frame(data)
mycolors <- c("red", "#FFC125", "darkgreen", "darkorange")
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(length(data$State),
icon = "fa-user")
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits =10),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
valueBox(sum(data$city == "Recife"),
icon = 'fa-building')
valueBox(sum(data$city == "Olinda"),
icon = 'fa-building')
valueBox(sum(data$city == "JaboatÃ£o dos Guararapes"),
icon = 'fa-building')
valueBox(sum(data$city == "Paulista"),
icon = 'fa-building')
p1 <- data %>%
group_by(city) %>%
summarise(count = n()) %>%
plot_ly(x = ~city,
y = ~count,
color = "blue",
type = 'bar') %>%
layout(xaxis = list(title = "Municipios"),
yaxis = list(title = 'Número de Casos'))
## Eliminar as Linhas conm NA's######
data<-na.omit(data)
p4 <- plot_ly(data, x=~confirmed) %>%
add_markers(y = ~deaths,
text = ~paste("confirmed: ", confirmed),
showlegend = F) %>%
add_lines(y = ~fitted(loess(confirmed ~ deaths)),
name = "Loess Smoother",
color = I("#FFC125"),
showlegend = T,
line = list(width=5)) %>%
layout(xaxis = list(title = "casos confirmados"),
yaxis = list(title = "mortes"))
p4
library(flexdashboard)
library(knitr)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(dplyr)
library(openintro)
library(highcharter)
library(ggvis)
library(maps) #mapas simples, eixos, escala, cidades
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
data <- read.csv("covid19-PE_09_04_2020.csv")
data<-data.frame(data)
mycolors <- c("red", "#FFC125", "darkgreen", "darkorange")
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(length(data$State),
icon = "fa-user")
###### Soma os Casos ####
soma<-sum(data$confirmed)
gauge(round(sum(data$confirmed),
digits =10),
min = 0,
max = 100000,
gaugeSectors(success = c(0, 1000),
warning = c(1000, 100000),
danger = c(100000, 1000000),
colors = c("green", "yellow", "red")))
valueBox(sum(data$city == "Recife"),
icon = 'fa-building')
valueBox(sum(data$city == "Olinda"),
icon = 'fa-building')
valueBox(sum(data$city == "JaboatÃ£o dos Guararapes"),
icon = 'fa-building')
valueBox(sum(data$city == "Paulista"),
icon = 'fa-building')
p1 <- data %>%
group_by(city) %>%
summarise(count = n()) %>%
plot_ly(x = ~city,
y = ~count,
color = "blue",
type = 'bar') %>%
layout(xaxis = list(title = "Municipios"),
yaxis = list(title = 'Número de Casos'))
valueBox(round(mean(data$deaths), digits = 2),
icon = "fa-area-chart")
valueBox(sum(data$city == "Paulista"),
icon = 'fa-building')
valueBox(sum(data$city == "JaboatÃ£o dos Guararapes"),
icon = 'fa-building')
